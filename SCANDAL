1)reimplement alarm clock by removing busy waiting
NEW:
struct alarm_for_thread{
	thread *t;
	int sleeping_ticks;
} 
//create a new list using list_init that will hold alarm_for_thread structs(the threads that are sent to sleep will be added here)
modify timer_sleep so that it adds each new alarm_for_thread item to the sleeping list
//timer_sleep also has to disable the interrupts(make the whole sleeping operation atomic, so that the context won't be switched while sending the thread to sleep)


int addToSleepingList(thread *t,int ticks){
	//create 	
}

//timer_interrupt() must be modified so that it calls a function(check_sleeping_threads) that iterates through the sleeping_list, decreasing the sleeping_ticks and awaking the thread if the sleeping_ticks becomes 0(removing it from the sleeping list as well)
  


void
sleeping_foreach ()
{
  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);

  for (e = list_begin (&sleeping_list); e != list_end (&sleeping_list);
       e = list_next (e))
    {
      //check sleepingList elements(struct alarm_for_thread items)
      //check_sleeping_threads is appealed here
    }
}

==============================================================

2) priority scheduling


ready list will be ordered based on each thread's priority field.
MODIFY
thread_unblock and thread_yield, so that it will insert(ordered) a new thread to the ready_list i.e. call list_insert_ordered()
THREAD NEW:
add new field(aquired_locks) on owner(current) thread.!!!!sorted based on each lock's maax_prio;
add new field:init_priority(the original prio that the thread has been created with)
priority will hold the current prio

new field on struct lock:max_prio which holds the biggerst priority of the currently waiting threads on that specific lock.

TO BE MODIFIED:lock_acquire: when a new thread is added to the waiting list of a lock update max_prio of its specific lock AND reorder the acquired_locks list AND refresh the current priority of the owner thread (by getting the prio of the first lock in acquired locks)

TO BE RECONSIDERED!!! on thread_unblock the current thread has to be yiealded (stop the execution and send to the ready list) so that the running thread will be reconsidered based on max_prio.
thread_unblock (struct thread *t) 
{
  enum intr_level old_level;

  ASSERT (is_thread (t));

  old_level = intr_disable ();
  ASSERT (t->status == THREAD_BLOCKED);
  list_push_back (&ready_list, &t->elem);
  t->status = THREAD_READY;
!!!
  if(thread_current()->priority<t->priority){
    thread_yield();
  }
!!!! 
 intr_set_level (old_level);


=================================================================
3.Advanced scheduler
ready_list (fixed sorted priorities)
thread_unblock priority threadului setat la max prio (63)
CHANGE
thread_ticku: schimbat time slice-u a.i sa fie in functie de prio lvl (ex actual slice=timeslice*10/curr_priority)
daca e gata time-quantum, decrease la lvl-u de prioritate a threadului.
face yield pe time slice expire
scheduleru ia urmatoru thread de executat de la top prio, fara sa faca ala interrupt la current






